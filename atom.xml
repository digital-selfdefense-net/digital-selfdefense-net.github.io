<?xml version="1.0" encoding="utf-8"?>
  <feed xmlns="http://www.w3.org/2005/Atom">
    <title>Digital Self-Defense Lab</title>
    <link href="https://digital-selfdefense.net/atom.xml" rel="self"/>
    <link href="https://digital-selfdefense.net/"/>
    <updated>2019-12-01T01:39:42+01:00</updated>
    <id>https://digital-selfdefense.net</id>
    <author>
      <name></name>
      <email></email>
    </author>
    <entry>
      <title>Battlefield Malware Analysis (Part 1)</title>
      <link href="https://digital-selfdefense.net/2019/11/30/Battlefield-Malware-Analysis.html"/>
      <updated>2019-11-30T11:00:02+01:00</updated>
      <id>https://digital-selfdefense.net/2019/11/30/Battlefield-Malware-Analysis</id>
      <content type="html">&lt;div class=&quot;message&quot;&gt;
        Hello Folks! In this blog post series named &quot;Battlefield Malware Analysis&quot; we will be investigating different tools and techniques 
        that you as a Malware Analysts / SOC Analyst / Incident Responder / (you name it) can use to make your life easier when dealing 
        with Malware Analysis. The &quot;Battlefield&quot; aspect of this blog post series stems from the fact that we will be covering real life malware analysis 
        problems which we encounter on a daily basis, and show you simple yet effective ways to cope with them. This blog post series aims to be 
        as practical as possible, by this we mean that we won't solely focus on the theoretical aspects of malware analysis but rather get our hands 
        dirty by dissecting malware.
        &lt;/div&gt;
        &lt;p&gt;Enough talk. Now it’s time to fasten our seatbelts and dig through some malware!&lt;/p&gt;
        &lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
        &lt;p&gt;In the first part of “Battlefield Malware Analysis” we will take a look at script based obfuscation and how it can be defeated in a fast and efficient way by using process injection and API hooking. Before we jump straight into the practical part let us define what we mean by script based obfuscation and why it is still so prevalent these days.&lt;/p&gt;
        &lt;p&gt;Script based obfuscation is a technique used by malware authors that allows them to hide the malicious intent of their scripts from malware analysts and anti-virus. This is achieved by abusing scripting language features like eval functions&lt;sup id=&quot;fnref:fn-eval_function&quot;&gt;&lt;a href=&quot;#fn:fn-eval_function&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, anonymous functions&lt;sup id=&quot;fnref:fn-anonymous_function&quot;&gt;&lt;a href=&quot;#fn:fn-anonymous_function&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; and string based encryption, encoding or transformation.&lt;/p&gt;
        &lt;p&gt;When we think of recent malware campaigns we often see that the initial attack vector used by todays attackers is still phishing. With the help of legitimate looking phishing e-mails attackers are able to get a first foothold into their target organization.&lt;/p&gt;
        &lt;p&gt;Back in the golden days of malware (80’s and 90’s) it was very common to see malicious attachments like for example “file.pdf.exe” as part of phishing e-mails. Nowadays people are aware of the fact there is baerly no valid reason to deliver exectuable files via e-mail attachments, and therefore we often see them being blocked by default.&lt;/p&gt;
        &lt;p&gt;Malware authors adapted to these restrictions by abusing legitimate file formats which are commonly used as e-mail attachments and provide some sort of scripting capabilities which will allow them to download and execute malicious code on their victims host.&lt;/p&gt;
        &lt;p&gt;The prevalence of script based obfuscation techniques during the delivery stage of the Cyber Kill-Chain&lt;sup id=&quot;fnref:fn-cyber_kill_chain&quot;&gt;&lt;a href=&quot;#fn:fn-cyber_kill_chain&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; is closely related to the fact that executable files are no longer a reliable way for initial infection.&lt;/p&gt;
        &lt;h2 id=&quot;scenario&quot;&gt;Scenario&lt;/h2&gt;
        &lt;p&gt;Now it’s time to introduce the scenario that we will be dealing within the first part of our blog post series:&lt;/p&gt;
        &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;You are a malware analyst tasked to analyze a bunch of malicious JScript attachments that were 
        delivered as part of phishing campaign to a group of c-level executives from your company. 
        Some of the c(lick) level executives from your company already opened the attachments and now you are
        in a hurry because they expect quick answers to clarify what happend.
        It's time to boot up your analyst workstation and provide the information your they requested from you. &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
        &lt;p&gt;&lt;a href=&quot;/assets/uploads/2019/11/post3/files/obfuscated.js&quot;&gt;Here&lt;/a&gt; you can download the malicious JScript attachment.&lt;/p&gt;
        &lt;h2 id=&quot;lab-setup&quot;&gt;Lab Setup&lt;/h2&gt;
        &lt;p&gt;In order to complete the exercise and become the hero of your company we recommend the following tools:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;Windows Server 2012 R2 64-Bit&lt;/li&gt;
        &lt;li&gt;Python 3.7.5&lt;/li&gt;
        &lt;li&gt;Frida 12.7.20&lt;/li&gt;
        &lt;li&gt;wscript.exe&lt;/li&gt;
        &lt;li&gt;(x64dbg [Apr 29 2019])&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;Other OS/Software versions will probably work too.&lt;/p&gt;
        &lt;h2 id=&quot;which-apis-to-look-for&quot;&gt;Which APIs to look for?&lt;/h2&gt;
        &lt;p&gt;When dealing with malicious scripts like VBScript or JScript you will notice that the vast majority of malicious scripts depend on activex controls&lt;sup id=&quot;fnref:fn-activex_control&quot;&gt;&lt;a href=&quot;#fn:fn-activex_control&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; / COM Objects&lt;sup id=&quot;fnref:fn-COM_object&quot;&gt;&lt;a href=&quot;#fn:fn-COM_object&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; to overcome the limitations imposed by the scripting language interpreter. By using activex controls from within JScript for example it is possible to accomplish certain tasks such as writing to the registry, creating files or executing other applications, which would be otherwise not possible without direct access to the Windows API. Malware authors will very likely try to hide those kind of actions by using obfuscation techniques for the purpose of avoiding detection from human analysts and anti-virus. The following JScript named “example.js” is intended as a toy example to demonstrate how activex controls can be used to start another application:&lt;/p&gt;
        &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt; 
        &lt;span class=&quot;c1&quot;&gt;// example.js&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;JScript&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fnShellExecuteJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;objShell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ActiveXObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;shell.application&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;objShell&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ShellExecute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;notepad.exe&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
        &lt;p&gt;In Microsoft Windows, JScript files are associated with the Windows Script Host&lt;sup id=&quot;fnref:fn-windows_script_host&quot;&gt;&lt;a href=&quot;#fn:fn-windows_script_host&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; (wscript.exe). This means that when a user double clicks a JScript file it will immediately be executed by wscript.exe. These circumstances are the reason why obfuscated JScript files are so popular among attackers. They provide a simple and effecitve way of executing malicious code on a target system. In the case of “example.js” a double click would result in the execution of the Windows API function &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; from &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell32.dll&lt;/code&gt;, which in turn will create the process “notepad.exe”.&lt;/p&gt;
        &lt;p&gt;But how does wscript.exe know that &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt;&lt;sup id=&quot;fnref:fn-msdn_ShellExecuteExW&quot;&gt;&lt;a href=&quot;#fn:fn-msdn_ShellExecuteExW&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; is implemented in &lt;code class=&quot;highlighter-rouge&quot;&gt;Shell32.dll&lt;/code&gt;? This information can be obtained from the windows registry in two simple steps:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;wscript.exe needs to lookup &lt;code class=&quot;highlighter-rouge&quot;&gt;HKEY_CLASSES_ROOT\Shell.Application\CLSID&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;CLSID = {?}&lt;/code&gt; value is used by wscript.exe to lookup the &lt;code class=&quot;highlighter-rouge&quot;&gt;InProcServer32&lt;/code&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;HKEY_CLASSES_ROOT\CLSID\{?}&lt;/code&gt;, which holds the implementation of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt;.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;Now it’s time to take a look at the malicious JScript attachments that were send to the c-level execs of our company. The first thing we notice when we search for common keywords like &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecute&lt;/code&gt; is that we found one match. But unlike in “example.js” the parameters passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecute&lt;/code&gt; are obfuscated, as presented in figure 1.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post3/images/1.PNG&quot; alt=&quot;Figure 1: obfuscated.js&quot; title=&quot;obfuscated.js&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;In the next step we need to get rid of the obfuscation without wasting to much precious time and brain resources on deobfuscating stuff in our head. By debugging wscript.exe and passing “obfuscated.js” as an argument it is possible to verify that the Windows API function &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; indeed is executed. This can be seen in the Debbuger Window (x64dbg) depicted in figure 2:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post3/images/2.PNG&quot; alt=&quot;Figure 2: Shell32.ShellExecuteExW&quot; title=&quot;Shell32.ShellExecuteExW&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;The first argument (&lt;code class=&quot;highlighter-rouge&quot;&gt;EBP+8&lt;/code&gt;) passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; is pointer to the struct &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELLEXECUTEINFOW&lt;/code&gt;&lt;sup id=&quot;fnref:fn-msdn_SHELLEXECUTEINFOW&quot;&gt;&lt;a href=&quot;#fn:fn-msdn_SHELLEXECUTEINFOW&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;, which contains information such as the application that needs to be exeucted, it’s commandline arguments and other settings. From an Malware Analysts standpoint the contents of the struct are very valuable because they have to be in deobfuscated form, so that &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; is able to execute the intended application. This means that the deobfuscation routine needs to be applied before the arguments are passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt;. By setting a breakpoint at &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; we can capture the deobfuscated arguments passed as a pointer to the struct &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELLEXECUTEINFOW&lt;/code&gt;.&lt;/p&gt;
        &lt;p&gt;In the following step we will take a look at the memory address &lt;code class=&quot;highlighter-rouge&quot;&gt;004AD94C&lt;/code&gt; in the dump section of our debbuger. This is the address where the struct &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELLEXECUTEINFOW&lt;/code&gt; resides in memory:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post3/images/3.PNG&quot; alt=&quot;Figure 3: SHELLEXECUTEINFOW&quot; title=&quot;SHELLEXECUTEINFOW&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;The struct contains several fields that are of interest for further analysis. To get a complete understanding of the struct &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELLEXECUTEINFOW&lt;/code&gt; we recommend to lookup the definition on msdn (&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/shellapi/ns-shellapi-shellexecuteinfow&quot;&gt;here&lt;/a&gt;). In figure 3 we can already see some of the fields like for example &lt;code class=&quot;highlighter-rouge&quot;&gt;lpVerb&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lpFile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lpParameters&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;lpDirectory&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nShow&lt;/code&gt;.&lt;/p&gt;
        &lt;p&gt;If our goal is to understand which application gets executed by &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; and what arguments are passed to it during execution, we need to take a look at the fields &lt;code class=&quot;highlighter-rouge&quot;&gt;lpFile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;lpParameters&lt;/code&gt;. When we inspect these fields we will see that “obfuscated.js” executes the following command:&lt;/p&gt;
        &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;powershell.exe -exec bypass -command &quot;whoami ; sleep 5&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
        &lt;p&gt;&lt;em&gt;Success&lt;/em&gt;! Now we are able to give our boss the information he needs to calm down the c-level execs of our company. But wait! There are still some malicious JScript files left for analysis. The question now is how you can analyze them without redoing all the steps presented so far? The answer to this question will be covered in the next section. Another important question that needs to be answered is what Windows APIs to look for when dealing with obfuscated scripts? The answer is simple! We don’t know what APIs to look for beforehand because each malicious script is different. The best way to undestand what the malware does and to defeat obfuscation is to intercept all interesting APIs. You might ask yourself what APIs are interesting then? Well it depends, but the blog post “&lt;a href=&quot;https://blog.talosintelligence.com/2017/08/windbg-and-javascript-analysis.html&quot;&gt;WinDBG and JavaScript Analysis&lt;/a&gt;” from Cisco Talos is a good starting point.&lt;/p&gt;
        &lt;h2 id=&quot;analyzing-malicious-scripts-at-scale&quot;&gt;Analyzing malicious scripts at scale&lt;/h2&gt;
        &lt;p&gt;In this section of the blog post we will explaint to you how we can analyze a bunch of malicious JScript attachments without repeating the tedious steps introduced in the last section. The answer to this is simple! With the help of process injection and API Hooking, we are able to analyze the function calls of our interest. This allows us to bypass obfuscation and get an understanding of what the malicious script tries to achive on the victims machine. But what if we are really lazy people and we don’t want to implement all of this process injection&lt;sup id=&quot;fnref:fn-process_injection&quot;&gt;&lt;a href=&quot;#fn:fn-process_injection&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; and hooking&lt;sup id=&quot;fnref:fn-hooking&quot;&gt;&lt;a href=&quot;#fn:fn-hooking&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt; stuff on our own? Then &lt;a href=&quot;https://frida.re/&quot;&gt;Frida&lt;/a&gt; is our answer!&lt;/p&gt;
        &lt;p&gt;But what is Frida? According to the projects webpage Frida is &lt;cite&gt;“[…] Greasemonkey for native apps, or, put in more technical terms, it’s a dynamic code instrumentation toolkit. It lets you inject snippets of JavaScript or your own library into native apps on Windows, macOS, GNU/Linux, iOS, Android, and QNX. Frida also provides you with some simple tools built on top of the Frida API. These can be used as-is, tweaked to your needs, or serve as examples of how to use the API.”&lt;/cite&gt;.&lt;/p&gt;
        &lt;p&gt;As you might guess from the description above there are plenty of things that you can do with Frida, but in our case we will solely focuse on how it can be used to automate the deobfuscation of “obfuscated.js”. Wait! so you are telling me…&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post3/images/4.jpg&quot; alt=&quot;Figure 4: Mandatory Meme&quot; title=&quot;Mandatory Meme&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Indeed, we will use Frida’s core, Gum (Instrumentation Library) and Gum’s JavaScript binding GumJS to hook &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; and grab the passed arguments in a deobfuscated state. In theory this is achieved as follows:&lt;/p&gt;
        &lt;ol&gt;
        &lt;li&gt;Frida core suspends the target process wscript.exe.&lt;/li&gt;
        &lt;li&gt;Frida core creates a remote thread in the target process which then loads Frida agent (Gum + Google’s V8 Engine) distributed as a shared library.&lt;/li&gt;
        &lt;li&gt;Gum is used to hook the function &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; from Shell32.dll in the target process wscript.exe.&lt;/li&gt;
        &lt;li&gt;Everytime &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; is called in inside the target process our JavaScript gets executed with the help of Google’s V8 Engine, which then gives us full access to the arguments passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt;.&lt;/li&gt;
        &lt;/ol&gt;
        &lt;p&gt;Before we start writing the JavaScript Code that will be executed instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt;, we can use &lt;code class=&quot;highlighter-rouge&quot;&gt;frida-trace&lt;/code&gt; to create a template for us. Please be aware of the fact that when we run &lt;code class=&quot;highlighter-rouge&quot;&gt;frida-trace&lt;/code&gt; as presented in figure 5 the obfuscated JScript will be executed. When analyzing an unknown script this step is not recommended.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post3/images/5.PNG&quot; alt=&quot;Figure 5: frida-trace&quot; title=&quot;frida-trace&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;After running &lt;code class=&quot;highlighter-rouge&quot;&gt;frida-trace&lt;/code&gt; the directory “__handlers__\SHELL32.dll\” is created in the current path. This directory contains the JavaScript file “ShellExecuteExW.js” which represents the template mentioned earlier. The JavaScript “ShellExecuteExW.js” will be used to define the behaviour of the hooked function &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt;. Everytime the function &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; is called within wscript.exe the hooking function &lt;code class=&quot;highlighter-rouge&quot;&gt;onEnter&lt;/code&gt; will also be executed.&lt;/p&gt;
        &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt; 
        &lt;span class=&quot;cm&quot;&gt;/**
        * Called synchronously when about to call ShellExecuteExW.
        *
        onEnter: function (log, args, state) {
        //Place your hook functionality here.
        },&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
        &lt;p&gt;The arguments passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt;, will also be present in our hooking function &lt;code class=&quot;highlighter-rouge&quot;&gt;onEnter&lt;/code&gt;, via the array &lt;code class=&quot;highlighter-rouge&quot;&gt;args&lt;/code&gt;. Recall from the previous section that the first and only argument passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; is a pointer to the struct &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELLEXECUTEINFOW&lt;/code&gt;. The address of the struct can now be used to access all the interesting fields which will reveal the purpose of the malicious JScript “obfuscated.js”. Figure 6 depicts the final implementation of the hooking function.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post3/images/6.PNG&quot; alt=&quot;Figure 6: Hooking function onEnter&quot; title=&quot;Hooking function onEnter&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Finally, if we rerun &lt;code class=&quot;highlighter-rouge&quot;&gt;frida-trace&lt;/code&gt; with the same commandline arguments as in figure 5, the previously defined hooking function will be executed whenever &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt; is called within wscript.exe. The hooking function will then print out all of the interesting fields from the struct &lt;code class=&quot;highlighter-rouge&quot;&gt;SHELLEXECUTEINFOW&lt;/code&gt; passed to &lt;code class=&quot;highlighter-rouge&quot;&gt;ShellExecuteExW&lt;/code&gt;:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post3/images/7.PNG&quot; alt=&quot;Figure 7: Final frida-trace &quot; title=&quot;Final frida-trace&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;With the help of &lt;code class=&quot;highlighter-rouge&quot;&gt;frida-trace&lt;/code&gt; and the hooking function &lt;code class=&quot;highlighter-rouge&quot;&gt;onEnter&lt;/code&gt; from “ShellExecuteExW.js”, we can now automate the analysis of the malicious JScript attachments that were received by the c-level executives of our company.&lt;/p&gt;
        &lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;
        &lt;p&gt;The approach presented in this blog post is based on the hypothesis that malware authors at some point will need to extend the functionality of their malicious scripts by using activex controls / COM Objects in order to get access to more powerful APIs. When doing so, it is highly likely that malware authors will try to hide the specifics (function names, arguments) of the APIs used by employing some form of obfuscation. With the help of frida we can easily intercept all the relevant API calls used by malicious scripts which allows us to bypass the implemented obfuscation techniques. Another great benefit that comes from using frida is the high grade of automation that can be achieved by using it.&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/digital-selfdefense-net/digital-selfdefense-net.github.io/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
        &lt;div class=&quot;footnotes&quot;&gt;
        &lt;ol&gt;
        &lt;li id=&quot;fn:fn-eval_function&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Eval&quot;&gt;Eval Functions&lt;/a&gt; &lt;a href=&quot;#fnref:fn-eval_function&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-anonymous_function&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Anonymous_function&quot;&gt;Anonymous Function&lt;/a&gt; &lt;a href=&quot;#fnref:fn-anonymous_function&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-cyber_kill_chain&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Kill_chain#The_Cyber_Kill_Chain&quot;&gt;Cyber Kill Chain&lt;/a&gt; &lt;a href=&quot;#fnref:fn-cyber_kill_chain&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-activex_control&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ActiveX&quot;&gt;ActiveX Control&lt;/a&gt; &lt;a href=&quot;#fnref:fn-activex_control&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-COM_object&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Component_Object_Model&quot;&gt;COM Object&lt;/a&gt; &lt;a href=&quot;#fnref:fn-COM_object&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-windows_script_host&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Windows_Script_Host&quot;&gt;Windows Script Host&lt;/a&gt; &lt;a href=&quot;#fnref:fn-windows_script_host&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-msdn_ShellExecuteExW&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/api/shellapi/nf-shellapi-shellexecuteexw&quot;&gt;ShellExecuteExW&lt;/a&gt; &lt;a href=&quot;#fnref:fn-msdn_ShellExecuteExW&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-msdn_SHELLEXECUTEINFOW&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/de-de/windows/win32/api/shellapi/ns-shellapi-shellexecuteinfow&quot;&gt;SHELLEXECUTEINFOW&lt;/a&gt; &lt;a href=&quot;#fnref:fn-msdn_SHELLEXECUTEINFOW&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-process_injection&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/DLL_injection&quot;&gt;DLL Injection&lt;/a&gt; &lt;a href=&quot;#fnref:fn-process_injection&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-hooking&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hooking&quot;&gt;Hooking&lt;/a&gt; &lt;a href=&quot;#fnref:fn-hooking&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;/ol&gt;
        &lt;/div&gt;
      </content>
    </entry>
    <entry>
      <title>Do it yourself Privacy Phone</title>
      <link href="https://digital-selfdefense.net/2019/11/30/Do-It-Yourself-Privacy-Phone.html"/>
      <updated>2019-11-30T11:00:01+01:00</updated>
      <id>https://digital-selfdefense.net/2019/11/30/Do-It-Yourself-Privacy-Phone</id>
      <content type="html">&lt;p&gt;Who doesn’t know that feeling? You are frustrated because you have said the word “OK” and then all of a sudden the “Google Assistant” appears. You scroll through social networks and wonder why Facebook offers you the shoes you just talked about 5 minutes ago. Then you read another article about how apps with third-party libraries like Baidu&lt;sup id=&quot;fnref:fn-baidu&quot;&gt;&lt;a href=&quot;#fn:fn-baidu&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; trick the whole Android operating system and can access your camera, microphone, etc. at any time. The picture of the frustrated Android user worrying about his digital privacy is now complete.&lt;/p&gt;
        &lt;p&gt;I was that Android user few years ago before I decided to fight back in order to regain my privacy. If you now think that this is another tutorial on how to install a custom ROM without “Google Services” then I have to disappoint you. What I really wanted at that time was a hardware solution that wouldn’t contain any spying hardware like GPS, camera and microphone. I chose the Nexus 5X&lt;sup id=&quot;fnref:fn-nexus_5x&quot;&gt;&lt;a href=&quot;#fn:fn-nexus_5x&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; because CopperheadOS&lt;sup id=&quot;fnref:fn-copperhead&quot;&gt;&lt;a href=&quot;#fn:fn-copperhead&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; offers free ROMs for this device and there a some good tutorials on how to remove the spying parts. Without further ado, I read a Nexus 5X teardown and picked the components I wanted to remove.&lt;/p&gt;
        &lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
        &lt;p&gt;I’m not responsible for bricked devices, dead SD Cards or thermonuclear war. Please do some research if you have any concerns about the steps presented in this tutorial!&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;YOU are choosing to make these modifications, and if you point the finger at me for messing up your device, I will laugh at you.&lt;/li&gt;
        &lt;li&gt;YOUR warranty will be void if you tamper with any part of your device / software.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
        &lt;p&gt;Finally, the used LG Nexus 5X that I bought online arrived in the mail and it was time to convert it into a privacy phone. Before we start I wanted to say sorry for the blurry pictures! I had way too much coffee that day and my hands were constantly shaking. In the next steps I will show you what needs to be done in order to get rid of the spy components.&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post2/images/1.jpg&quot; alt=&quot;Figure 1: LG Nexus 5X&quot; title=&quot;LG Nexus 5X&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Besides the phone you will need some tools like the iFixit Toolkit&lt;sup id=&quot;fnref:fn-iFixit&quot;&gt;&lt;a href=&quot;#fn:fn-iFixit&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; (or something similar) in order to follow the steps presented below.&lt;/p&gt;
        &lt;h2 id=&quot;teardown&quot;&gt;Teardown&lt;/h2&gt;
        &lt;p&gt;Step 1: Remove the backcover&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post2/images/2.jpg&quot; alt=&quot;Figure 2: Remove the backcover&quot; title=&quot;Remove the backcover&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Step 2: Remove all screws:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post2/images/3.png&quot; alt=&quot;Figure 3: Remove all screws&quot; title=&quot;Remove all screws&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Step 3: Remove the middle frame:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post2/images/4.png&quot; alt=&quot;Figure 4: Remove the middle frame&quot; title=&quot;Remove the middle frame&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Step 4: Remove the three microphones:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post2/images/5.png&quot; alt=&quot;Figure 5: Remove the three microphones&quot; title=&quot;Remove the three microphones&quot; /&gt;
        &lt;img src=&quot;/assets/uploads/2019/11/post2/images/6.png&quot; alt=&quot;Figure 6: Remove the three microphones&quot; title=&quot;Remove the three microphones&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Step 5: Remove GPS, I don’t know the exact name for this little thing:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post2/images/7.png&quot; alt=&quot;Figure 7: Remove GPS&quot; title=&quot;Remove GPS&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Step 6: Remove the front- and back camera:&lt;/p&gt;
        &lt;p&gt;&lt;img src=&quot;/assets/uploads/2019/11/post2/images/8.png&quot; alt=&quot;Figure 8: Remove the front- and back camera&quot; title=&quot;Remove the front- and back camera&quot; /&gt;
        &lt;img src=&quot;/assets/uploads/2019/11/post2/images/9.png&quot; alt=&quot;Figure 9: Remove the front- and back camera&quot; title=&quot;Remove the front- and back camera&quot; /&gt;&lt;/p&gt;
        &lt;p&gt;Step 7: Reassemble everything, flash a ROM of your choice (I recommend CopperheadOS) and you’re done!&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/digital-selfdefense-net/digital-selfdefense-net.github.io/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
        &lt;div class=&quot;footnotes&quot;&gt;
        &lt;ol&gt;
        &lt;li id=&quot;fn:fn-baidu&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://www.ftc.gov/system/files/documents/public_events/1415032/privacycon2019_serge_egelman.pdf&quot;&gt;50 Ways to Leak Your Data&lt;/a&gt; &lt;a href=&quot;#fnref:fn-baidu&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-nexus_5x&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Nexus_5X&quot;&gt;Nexus 5X&lt;/a&gt; &lt;a href=&quot;#fnref:fn-nexus_5x&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-copperhead&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://copperhead.co/&quot;&gt;CopperheadOS&lt;/a&gt; &lt;a href=&quot;#fnref:fn-copperhead&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;li id=&quot;fn:fn-iFixit&quot;&gt;
        &lt;p&gt;&lt;a href=&quot;https://gizmodo.com/this-cheap-20-toolkit-can-open-99-percent-of-your-gadg-1789224245&quot;&gt;iFixit&lt;/a&gt; &lt;a href=&quot;#fnref:fn-iFixit&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
        &lt;/li&gt;
        &lt;/ol&gt;
        &lt;/div&gt;
      </content>
    </entry>
    <entry>
      <title>Hello, World!</title>
      <link href="https://digital-selfdefense.net/2019/11/30/Hello-World.html"/>
      <updated>2019-11-30T11:00:00+01:00</updated>
      <id>https://digital-selfdefense.net/2019/11/30/Hello-World</id>
      <content type="html">&lt;p&gt;Digital Self-Defense Lab is virtual hackerspace established in november 2019 by a small group of volunteers. We aim to provide a virtual space for people to hack, create, learn, and explore in a safe, welcoming, and accessible environment. In comparison to traditional hackerspaces we don’t require our members to leave their homes in order to participate in our community. The only thing required is a working computer and an internet connection.&lt;/p&gt;
        &lt;p&gt;The founding fathers of Digital Self-Defense Lab have chosen to stay “anonymous” mainly because of privacy concerns. Additionally we belive that &lt;strong&gt;content&lt;/strong&gt; is more important than &lt;strong&gt;people&lt;/strong&gt;, therefore all content is published under “anonymous”.&lt;/p&gt;
        &lt;p&gt;We come from different places but have the same passion for information security, which we love to share with others and that’s the main reason why we founded Digital Self-Defense Lab.&lt;/p&gt;
        &lt;p&gt;Sharing our knowledge with the infosec community is a way of saying thank you to all the great people out there that are spending countless hours in support of the infosec community.&lt;/p&gt;
        &lt;p&gt;In the near future we are planning to grow our virtual hackerspace and expand to all corners of the world. If you like our work, feel free to participate and spread the word. These are the topics that our members are interested in, listed in a alphabetical order:&lt;/p&gt;
        &lt;ul&gt;
        &lt;li&gt;Cryptography&lt;/li&gt;
        &lt;li&gt;Digital Forensics&lt;/li&gt;
        &lt;li&gt;Exploit Development&lt;/li&gt;
        &lt;li&gt;Hardware Hacking&lt;/li&gt;
        &lt;li&gt;Incident Response&lt;/li&gt;
        &lt;li&gt;Lockpicking&lt;/li&gt;
        &lt;li&gt;Malware Analysis&lt;/li&gt;
        &lt;li&gt;OSINT&lt;/li&gt;
        &lt;li&gt;Penetration Testing&lt;/li&gt;
        &lt;li&gt;Privacy and Anonymity&lt;/li&gt;
        &lt;li&gt;Programming&lt;/li&gt;
        &lt;li&gt;Reverse Engineering&lt;/li&gt;
        &lt;li&gt;Security Research&lt;/li&gt;
        &lt;li&gt;Threat Intelligence&lt;/li&gt;
        &lt;/ul&gt;
        &lt;p&gt;If you are interested in any of the topics above you should consider joining us! Keep in mind that you don’t have to be an subject matter expert in any of the mentioned topics in order to join us. The only thing we require from our members is respectful behaviour towards other members and the willingness to constantly learn and share knowledge.&lt;/p&gt;
        &lt;p&gt;Do you want to join Digital Self-Defense Lab? &lt;a href=&quot;/#contact&quot;&gt;CLICK HERE&lt;/a&gt;&lt;/p&gt;
        &lt;p&gt;See you soon!&lt;/p&gt;
        &lt;hr /&gt;
        &lt;p&gt;Want to see something else added? &lt;a href=&quot;https://github.com/digital-selfdefense-net/digital-selfdefense-net.github.io/issues/new&quot;&gt;Open an issue.&lt;/a&gt;&lt;/p&gt;
      </content>
    </entry>
  </feed>